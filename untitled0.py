# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JYLRWlWWsAGe3YMJRhv-vDVfs0AM-7Kh
"""

# Description : this program detects if an email is spam(1) or not(0)

#import libraries
import numpy as np
import pandas as pd
import nltk
from nltk.corpus import stopwords
import string

#load the data
from google.colab import files
uploadede= files.upload()

#read the cvs file
df=pd.read_csv('spam_ham_dataset.csv')
#print the first 5 rows of data
df.head(5)

#print the shate.(get the number of the rows and columns)
df.shape

#get the columns names
df.columns

#check for duplicates and remove them
df.drop_duplicates(inplace=True)

#show the new shape
df.shape

#sDownlaod the stopword pakages
nltk.download('stopwords')

def process_text(text):
  #1 remove  punctuation
  #2 remove stopwords
  #3 return a list of clean text words
  #1
  nopunc=[ char for char in text if char not in string .punctuation]
  nopunc= ''.join(nopunc)
  #2
  clean_words=[word for word in nopunc.split() if word.lower() not in stopwords.words('english')]
  #3
  return clean_words

#show the tokenization(a list of tokens aslo called lemmas )
df['text'].head().apply(process_text)

#convert a collection of text to a matrix of token
from sklearn.feature_extraction.text import CountVectorizer
message_bow = CountVectorizer(analyzer=process_text).fit_transform(df['text'])

#split the data inot 80% and 20% testing
from sklearn.model_selection import train_test_split
X_train , X_test ,y_train, y_test= train_test_split(message_bow, df['label_num'], test_size=0.20,random_state=0)

#get the shape of message_bow
message_bow.shape

#cretae and train the naive bayes classifier
from sklearn.naive_bayes import MultinomialNB
classifer= MultinomialNB().fit(X_train,y_train)

#print the predictions
print(classifer.predict(X_train))
#print the actual values
print(y_train.values)

#evaluate the model on the training data se
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
pred= classifer.predict(X_train)
print(classification_report(y_train,pred))
print()
print('confusion Matrix:\n', confusion_matrix(y_train,pred))
print()
print('Accuracy:',accuracy_score(y_train,pred))

print(classifer.predict(X_test))
#print the actual values
print(y_test.values)

#evaluate the model on the training data se
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
pred= classifer.predict(X_test)
print(classification_report(y_test,pred))
print()
print('confusion Matrix:\n', confusion_matrix(y_test,pred))
print()
print('Accuracy:',accuracy_score(y_test,pred))